<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Order Details</title>
    <link rel="preconnect" href="https://fonts.googleapis.com">
    <link rel="preconnect" href="https://fonts.gstatic.com" crossorigin>
    <link href="https://fonts.googleapis.com/css2?family=Open+Sans:wght@400;600&family=Raleway:wght@600;800&display=swap" rel="stylesheet"> 

    <!-- Icon Font Stylesheet -->
    <link rel="stylesheet" href="https://use.fontawesome.com/releases/v5.15.4/css/all.css"/>
    <link href="https://cdn.jsdelivr.net/npm/bootstrap-icons@1.4.1/font/bootstrap-icons.css" rel="stylesheet">
    <link href="https://fonts.googleapis.com/css2?family=Poppins:wght@400;500;600;700;800&display=swap" rel="stylesheet">
    <!-- Customized Bootstrap Stylesheet -->
    <link href="/User/css/bootstrap.min.css" rel="stylesheet">

    <!-- Template Stylesheet -->
    <link href="/User/css/style.css" rel="stylesheet">
    <style>
        
        .container {
    /* max-width: 800px; */
    margin: 0 auto;
    padding: 20px;
    font-family: 'Arial', sans-serif;
    color: #333;
}

/* Header styling */
h1 {
    text-align: center;
    font-size: 32px;
    margin-bottom: 20px;
    font-weight: bold;
    color: #2C3E50;
    text-transform: uppercase;
}

/* Address Section Styling */
.address-section {
    border: 1px solid #ddd;
    padding: 20px;
    border-radius: 10px;
    margin-bottom: 20px;
    background-color: #f9f9f9;
    box-shadow: 0 4px 10px rgba(0, 0, 0, 0.1);
    transition: transform 0.3s ease-in-out;
}

.address-section:hover {
    transform: scale(1.02);
    box-shadow: 0 6px 12px rgba(0, 0, 0, 0.2);
}

.address-section h3 {
    font-size: 22px;
    margin-bottom: 10px;
    color: #1ABC9C;
}

.address-section p {
    font-size: 16px;
    margin-bottom: 5px;
}

/* Order Details */
h3 {
    font-size: 20px;
    color: #333;
}

p {
    font-size: 16px;
    color: #555;
}

/* Status Styling */
.status {
    color: rgb(21, 147, 50);
    font-weight: bold;
    padding: 5px 10px;
    border-radius: 15px;
    background-color: #ecf9ec;
}

/* Table Styling */
table {
    width: 100%;
    text-align: center;
    border-collapse: collapse;
    margin-bottom: 20px;
}

thead th {
    background-color: #3498DB;
    color: rgb(32, 31, 31);
    font-size: 18px;
    padding: 10px;
}

tbody td {
    padding: 10px;
    font-size: 16px;
}

tbody tr:nth-child(odd) {
    background-color: #f2f2f2;
}

tbody tr:hover {
    background-color: #ddd;
}

img {
    width: 70px;
    height: 70px;
    object-fit: cover;
    border-radius: 10px;
    transition: transform 0.3s ease;
}

img:hover {
    transform: scale(1.1);
}

/* Tracking Section */















/* Button Styles */
.btn {
    display: inline-block;
    font-size: 14px;
    padding: 10px 20px;
    text-align: center;
    border-radius: 25px;
    text-decoration: none;
    cursor: pointer;
    transition: background-color 0.3s ease, box-shadow 0.3s ease;
}

.btn:hover {
    box-shadow: 0 4px 12px rgba(0, 0, 0, 0.15);
}

.btn-secondary {
    background-color: #6c757d;
    color: white;
}

.btn-secondary:hover {
    background-color: #5a6268;
}

.cancel-button {
    margin-left: 80%;
    background-color: #dc3545;
    color: white;
}

.cancel-button:hover {
    background-color: #c82333;
}

/* Animation for buttons */
.cancel-button, .btn-secondary {
    animation: pulse 1.5s infinite;
}

@keyframes pulse {
    0% { transform: scale(1); }
    50% { transform: scale(1.05); }
    100% { transform: scale(1); }
}

/* Responsive Styles */
@media (max-width: 768px) {
    .container {
        padding: 10px;
    }

    h1 {
        font-size: 24px;
    }

    h3 {
        font-size: 18px;
    }

    table thead th {
        font-size: 16px;
    }
}
    </style>

    <!-- tracking styles -->
    <style>
 /* General Styling */
/* General Styling */
.tracking-header {
    text-align: center;
    font-size: 1.75rem;
    color: #333;
    margin-bottom: 20px;
    font-weight: bold;
}

.tracking {
    display: flex;
    justify-content: space-between;
    align-items: center;
    position: relative;
    margin: 20px 0;
    padding: 20px 0;
    width: 100%;
    max-width: 1000px;
    margin: 0 auto;
    animation: fadeIn 0.8s ease-out;
}

.tracking-step {
    text-align: center;
    flex-basis: 20%;
    position: relative;
    transition: transform 0.4s ease-in-out;
}

/* Progress Bar */
.progress-bar {
    position: absolute;
    top: 50%;
    left: 0;
    right: 0;
    height: 6px;
    background-color: #e0e0e0; /* Background color for the progress bar */
    border-radius: 10px;
    z-index: 0;
    overflow: hidden;
}

.progress {
    height: 6px;
    background: linear-gradient(90deg, #4caf50, #2e7d32); /* Green gradient */
    border-radius: 10px;
    transition: width 1.2s ease;
    z-index: 1;
}

/* Active Step */
.tracking-step.active .tracking-icon {
    background: linear-gradient(90deg, #4caf50, #2e7d32); /* Active step green gradient */
    color: white;
    box-shadow: 0 4px 12px rgba(0, 0, 0, 0.2);
    transform: scale(1.2);
    transition: all 0.4s ease-in-out;
}

.tracking-step.active .tracking-text {
    color: #2e7d32; /* Darker green for active text */
    font-size: 1.1rem;
}

/* Step Icon */
.tracking-icon {
    width: 50px;
    height: 50px;
    background-color: #ddd;
    border-radius: 50%;
    display: flex;
    justify-content: center;
    align-items: center;
    font-size: 22px;
    color: #fff;
    margin-bottom: 10px;
    transition: all 0.6s ease-in-out;
}

/* Hover Effect */
.tracking-step:hover .tracking-icon {
    transform: scale(1.1);
    transition: transform 0.3s ease;
    background-color: #66bb6a; /* Lighter green on hover */
}

/* Step Text */
.tracking-text {
    font-size: 14px;
    color: #666;
    font-weight: bold;
    text-transform: uppercase;
    transition: color 0.4s ease, font-size 0.4s ease;
}

/* Progress Animation */
@keyframes fadeIn {
    from {
        opacity: 0;
        transform: translateY(20px);
    }
    to {
        opacity: 1;
        transform: translateY(0);
    }
}

@keyframes popIn {
    0% {
        transform: scale(0.8);
        opacity: 0;
    }
    100% {
        transform: scale(1);
        opacity: 1;
    }
}

/* Responsive Design */
@media (max-width: 768px) {
    .tracking {
        flex-direction: column;
        padding: 10px 0;
    }

    .tracking-step {
        margin-bottom: 20px;
    }

    .progress-bar {
        width: 80%;
        top: 60px;
        left: 10%;
    }
}

@media (max-width: 576px) {
    .tracking-icon {
        width: 40px;
        height: 40px;
        font-size: 18px;
    }

    .tracking-text {
        font-size: 12px;
    }
}
.cancel-message {
    color: #dc3545; /* Red color for the cancellation message */
    font-weight: bold;
    margin: 15px 0;
}



    </style>
</head>
<body>

    <%- include('partials/header') %>

    <div class="container order-details">
        <h1>Order Details</h1>
    
        <!-- Address Details Section -->
        <div class="address-section">
            <h3>Delivery Address</h3>
            <p><strong>Name: </strong><%= order.address.name %></p>
            <p><strong>Phone: </strong><%= order.address.phone %></p>
            <p><strong>Address: </strong><%= order.address.address %>, <%= order.address.locality %>, <%= order.address.landmark %> - <%= order.address.pincode %></p>
            <p><strong>District: </strong><%= order.address.district %></p>
           
        </div>
    
        <!-- Order Details Section -->
        <h3>Order ID: <%= order.orderId %></h3>
        <p class="order-date">Date: <%= new Date(order.orderDate).toLocaleDateString() %></p>
    
        <p style="color: #28a745; font-weight: 600;" ><strong style="color: #1243d6;">Payment Method: </strong><%= order.paymentMethod %></p>

        <% if (order.isCancelled) { %>
            <p class="cancel-status">This order has been canceled</p>
        <% } else { %>
            <% if (order.status === 'Pending') { %>
                <p style="font-weight: bold; color: red;">Payment Pending</p>
                <p style="font-weight: normal; color: rgb(18, 102, 221);">Please complete your payment</p>
                <button style="background-color: green; color: white; padding: 10px 20px; border: none; border-radius: 5px; cursor: pointer;" onclick="paymentNow()">Pay Now ₹<%= order.totalPrice %></button>
                

            <% } else { %>
                <p class="order-status">Status: <span class="status <%= order.status.toLowerCase().replace(/\s+/g, '-') %>"><%= order.status %></span></p>
            <% } %>
            
           
        <% } %>
    
        <p class="total">Total: ₹<%= order.totalPrice %> for <%= order.items.filter(item => item.status !== 'Cancelled').length; %> items</p>
    
        <% if (order.couponCode !=="") { %> <!-- Check if coupon was applied -->
            <div class="coupon-info">
                <p>Coupon Applied: <strong><%= order.couponCode %></strong></p>
                <p>Coupon Discount: ₹<%= order.couponDiscount %></p>
            </div>
        <% } %>
        <!-- Items Section -->
        <h6>Items:</h6>
        <table class="table table-bordered">
            <thead class="thead-light">
                <tr>
                    <th>Product Image</th>
                    <th>Product Name</th>
                    <th>Price</th>
                    <th>Quantity</th>
                    <th>Subtotal</th>
                    <th>Action</th> <!-- Add Action column -->
                </tr>
            </thead>
            <tbody>
                <% order.items.forEach(function(item) { %>
                    <tr>
                        <td><img src="/images/<%= item.productImage %>" alt="<%= item.productName %>" class="product-image"></td>
                        <td><%= item.productName %></td>
                        <td>₹<%= item.price %></td>
                        <td><%= item.quantity %></td>
                        <td>₹<%= (item.price * item.quantity).toFixed(2) %></td>
                        <td>
                            <!-- Cancel button for individual items -->
                            <% if (order.status !== 'Cancelled' && item.status !== 'Cancelled' && order.status !== 'Out for Delivery' && order.status !== 'Delivered' && order.status !== 'Return Requested' && order.status !== "Return Approved" && order.status !== "Return Rejected" && order.status !== 'Returned') { %>
                                <button type="button" class="btn btn-danger" style="background-color: #ff4d4d; border-color: #ff4d4d;" onclick="cancelItem('<%= item._id %>')">Cancel</button>
                            <% } else if (order.status === 'Delivered') { %>
                                <% if (item.status === 'Ordered') { %>
                                    <button type="button" class="btn btn-warning" style="background-color: #f0ad4e; border-color: #f0ad4e;" onclick="returnItem('<%= item._id %>')">Return Item</button>
                                <% } else if (item.status === 'Return Requested') { %>
                                    <p style="color: #ff9900; font-weight: bold;">Waiting for Return Approval</p>
                                <% } else if (item.status === 'Cancelled') { %>
                                    <p style="color: #ff6666; font-weight: bold;">Item Was Cancelled</p>
                                <% } else if (item.status === 'Return Rejected') { %>
                                    <p style="color: #da1d17; font-weight: bold;">Return Has Been Rejected</p>
                                    <% } else if (item.status === 'Returned') { %>
                                        <span style="color: #24b524; font-weight: bold;">Returned</span><br>
                                        <span style="color: black;"> <span style="color: #1b4feb; font-weight: 600;">₹<%= (item.price * item.quantity).toFixed(2) %></span> Refunded</span>
                                    <% } %>
                            <% } else { %>
                                <span class="text-muted">
                                    <% if (item.status === 'Cancelled') { %>
                                        <span style="color: #ff4d4d; font-weight: bold;">Cancelled</span>
                                    <% } else if (order.status === 'Out for Delivery') { %>
                                        <span style="color: #f0ad4e;">Out for Delivery</span>
                                    <% } else if (order.status === 'Delivered') { %>
                                        <span style="color: #5bc0de;">Delivered</span>
                                    <% } %>
                                </span>
                            <% } %>
                        </td>
                        
                    </tr>
                <% }); %>
            </tbody>
        </table>
       
    
 <!-- Delivery Tracking Section -->
<h6 class="tracking-header">Delivery Tracking</h6>

<% if (order.status === 'Cancelled') { %>
    <p class="cancel-message">This order has been cancelled.</p>
<% } else if (order.status === 'Return Requested') { %>
    <p style="color: rgb(230, 68, 4); font-weight: 600; font-size: 22px;" class="return-message">Return requested for this order. Awaiting approval.</p>
<% } else if (order.status === 'Return Approved') { %>
    <p style="color: #28a745; font-size: 22px; font-weight: 600;" class="return-approved-message">Return has been approved. The amount will be refunded to your wallet.</p>
<% } else if (order.status === 'Return Rejected') { %>
    <p style="color: #e10a0a; font-size: 22px; font-weight: 600;" class="return-approved-message">The Return requesting has been Rejected</p>
<% }else if (order.status === 'Returned') { %>
    <p style= "padding: 10px 20px; display: flex; flex-direction: row; justify-content: center; background-color: #28a745; color: #ffffff; font-size: 22px;" class="order-returned-message">The order has been returned and the refund has been processed to your wallet.</p>
<% } else { %>
    <div class="tracking">
        <div class="progress-bar">
            <div class="progress" style="width: <%= (['Order placed', 'Confirmed', 'Shipped', 'Out for Delivery', 'Delivered'].indexOf(order.status) + 1) * 20 %>%;"></div>
        </div>

        <!-- Order Placed -->
        <div class="tracking-step <%= ['Order placed', 'Confirmed', 'Shipped', 'Out for Delivery', 'Delivered'].includes(order.status) ? 'active' : '' %>">
            <div class="tracking-icon"><i class="fas fa-box"></i></div>
            <div class="tracking-text">Order Placed</div>
        </div>

        <!-- Confirmed -->
        <div class="tracking-step <%= ['Confirmed', 'Shipped', 'Out for Delivery', 'Delivered'].includes(order.status) ? 'active' : '' %>">
            <div class="tracking-icon"><i class="fas fa-clipboard-check"></i></div>
            <div class="tracking-text">Confirmed</div>
        </div>

        <!-- Shipped -->
        <div class="tracking-step <%= ['Shipped', 'Out for Delivery', 'Delivered'].includes(order.status) ? 'active' : '' %>">
            <div class="tracking-icon"><i class="fas fa-truck"></i></div>
            <div class="tracking-text">Shipped</div>
        </div>

        <!-- Out for Delivery -->
        <div class="tracking-step <%= ['Out for Delivery', 'Delivered'].includes(order.status) ? 'active' : '' %>">
            <div class="tracking-icon"><i class="fas fa-shipping-fast"></i></div>
            <div class="tracking-text">Out for Delivery</div>
        </div>

        <!-- Delivered -->
        <div class="tracking-step <%= order.status === 'Delivered' ? 'active' : '' %>">
            <div class="tracking-icon"><i class="fas fa-check-circle"></i></div>
            <div class="tracking-text">Delivered</div>
        </div>
    </div>
<% } %>
<!-- Buttons Section -->
<div style="margin-top: 30px;" class="button-section">
    <a style="color: #eceeec; background-color: #28a745;" href="/profile" class="btn back-button">Back to Orders</a>

    <% if (order.status !== "Cancelled" && order.status !== "Delivered" && order.status !== "Out for Delivery" && order.status !== 'Return Requested' && order.status !== 'Return Approved' && order.status !== 'Return Rejected' && order.status !== 'Returned') { %>
        <button type="submit" class="btn btn-danger" onclick="cancelOrder('<%= order._id %>')">Cancel Order</button>
    <% } %>

    <% if (order.status === "Delivered") { %>
        <button type="button" class="btn btn-warning" onclick="requestReturnOrder('<%= order._id %>')">Return Order</button>
        <button class="btn btn-primary" onclick="downloadInvoice('<%= order._id %>')">Download Invoice</button>
    <% } %>
</div>

<script>
    function cancelItem(itemId) {
    Swal.fire({
        title: 'Confirm Cancellation',
        text: 'Are you sure you want to cancel this item?',
        icon: 'warning',
        showCancelButton: true,
        confirmButtonText: 'Yes, cancel it!',
        cancelButtonText: 'No, keep it!',
        customClass: {
            confirmButton: 'btn btn-danger',
            cancelButton: 'btn btn-secondary'
        }
    }).then((result) => {
        if (result.isConfirmed) {
            // Axios PATCH request to cancel the individual item
            axios.patch('/order/cancel-item', { itemId })
                .then(response => {
                    if (response.data.success) {
                        Swal.fire({
                            title: 'Success!',
                            text: 'Item cancelled successfully!',
                            icon: 'success',
                            confirmButtonText: 'OK',
                            customClass: {
                                confirmButton: 'btn btn-success'
                            }
                        }).then(() => {
                            location.reload();
                        });
                    } else {
                        Swal.fire({
                            title: 'Error!',
                            text: 'Failed to cancel item. Please try again.',
                            icon: 'error',
                            showConfirmButton: false,
                            timer: 1500
                        });
                    }
                }).catch(error => {
                    console.error('Error cancelling item:', error);
                    Swal.fire({
                        title: 'Server Error!',
                        text: 'Please try again later.',
                        icon: 'error',
                        confirmButtonText: 'OK',
                        customClass: {
                            confirmButton: 'btn btn-danger'
                        }
                    });
                });
        }
    });
}
</script>

<script>
          function cancelOrder(orderId) {
      // SweetAlert confirmation
      Swal.fire({
          title: 'Confirm Submission',
          text: 'Are you sure you want to cancel this order?',
          icon: 'warning',
          showCancelButton: true,
          confirmButtonText: 'Yes, cancel it!',
          cancelButtonText: 'No, keep it!',
          customClass: {
              confirmButton: 'btn btn-danger', // Cancel button styling
              cancelButton: 'btn btn-secondary' // Keep button styling for cancel
          }
      }).then((result) => {
          if (result.isConfirmed) {
              // If confirmed, make the Axios PATCH request
              axios.patch('/order/cancel', { orderId })
                  .then(response => {
                      if (response.data.success) {
                          // SweetAlert success notification
                          Swal.fire({
                              title: 'Success!',
                              text: 'Order cancelled successfully!',
                              icon: 'success',
                              confirmButtonText: 'OK',
                              customClass: {
                                  confirmButton: 'btn btn-success' // Success button styling
                              }
                          }).then(() => {
                              location.reload(); // Reload the page after cancellation
                          });
                      } else {
                          // SweetAlert error notification
                          Swal.fire({
                              title: 'Error!',
                              text: 'Failed to cancel order. Please try again.',
                              icon: 'error',
                              showConfirmButton: false,
                              timer: 1500
                          });
                      }
                  }).catch(error => {
                      console.error('Error cancelling order:', error);
                      // SweetAlert server error notification
                      Swal.fire({
                          title: 'Server Error!',
                          text: 'Please try again later.',
                          icon: 'error',
                          confirmButtonText: 'OK',
                          customClass: {
                              confirmButton: 'btn btn-danger' // Error button styling
                          }
                      });
                  });
          }
      });
  }
</script>
<script>
       const orderId= '<%= order._id %>';
       const totalPrice= '<%= order.totalPrice %>'

      async function paymentNow(){

            console.log(orderId)
            console.log(totalPrice)
            const checkdata={
                orderId:orderId,
                totalPrice:totalPrice
            }
            axios.post('/proceedToPayment',checkdata)
            .then(async(response)=>{
                if(response.data.success){
                    let razorpayOrderId= response.data.razorpayOrderId;
                           let amount=response.data.amount;
                           let currency= response.data.currency;
                           let orderId= response.data.orderId;
                           console.log(orderId)
                           console.log(razorpayOrderId,amount,currency)

                        await  initiateRazorpayPayment(razorpayOrderId,amount,currency,orderId);
                }
            })
        }

</script>

<script>
        function initiateRazorpayPayment(razorpayOrderId, amount, currency,orderId) {
    console.log('hashim')
    const options = {
        key: 'rzp_test_y9pYpW6GyA8Eir', // Razorpay Key ID
        amount: amount * 100, // Amount in paise
        currency: currency,
        name: 'Siyad', // Business name
        description: 'Order Payment',
        order_id: razorpayOrderId,
        orderId:orderId,
        handler: async function (response) {
            console.log('10:   ',orderId)
            console.log('Razorpay Response:', response); // Debugging
            verifyRazorpayPayment(response,orderId); // Call verification
        },
        prefill: {
            name: 'Customer Name',
            email: 'customer@example.com',
            contact: '9999999999'
        },
        theme: {
            color: '#3399cc'
        }
    };

    const rzp1 = new Razorpay(options);
    rzp1.open(); // Open the Razorpay checkout
}
function verifyRazorpayPayment(paymentData,orderId) {
    console.log('11:   ',orderId)
    console.log(paymentData);
    console.log("checkingg");

    axios.post(`/order/verify_payment/${orderId}`, paymentData,{
        headers: { 'Content-Type': 'application/json' }
    })
    .then(response => {
        const data = response.data;
        if (data.success) {
            let orderId=data.orderId
            window.location.href = `/order/placed/${orderId}`; // Redirect
        } else {
            alert('Payment verification failed.');
        }
    })
    .catch(error => {
        console.error('Error verifying payment:', error);
    });
}

function getsuccessPage(orderId){
    console.log("check data",  orderId)
    axios.get(`/order/placed/${orderId}`)
}
  </script>


<!-- return order function.. -->
<script>
 function requestReturnOrder(orderId) {
    Swal.fire({
        title: 'Request Return?',
        text: "Are you sure you want to request a return for this order? Please enter the reason for the return:",
        icon: 'warning',
        input: 'text', // Adding an input field
        inputPlaceholder: 'Enter reason for return',
        showCancelButton: true,
        confirmButtonColor: '#3085d6',
        cancelButtonColor: '#d33',
        confirmButtonText: 'Yes, request it!',
        cancelButtonText: 'Cancel',
        preConfirm: (reason) => {
            if (!reason) {
                Swal.showValidationMessage('You need to enter a reason for the return.');
            }
            return reason; // Return the reason entered
        }
    }).then((result) => {
        if (result.isConfirmed) {
            const reason = result.value; // Get the entered reason

            // Send return request to the server
            axios.post('/request-return-order', { orderId: orderId, reason: reason })
                .then(response => {
                    if (response.data.success) {
                        Swal.fire({
                            title: 'Request Sent!',
                            text: 'Your return request has been submitted successfully. The admin will review it.',
                            icon: 'success',
                            confirmButtonColor: '#3085d6'
                        }).then(() => {
                            window.location.reload(); // Reload to reflect changes
                        });
                    } else {
                        Swal.fire({
                            title: 'Error',
                            text: response.data.message || 'Something went wrong.',
                            icon: 'error',
                            confirmButtonColor: '#3085d6'
                        });
                    }
                })
                .catch(error => {
                    console.error('Error requesting return:', error);
                    Swal.fire({
                        title: 'Error',
                        text: 'An error occurred while submitting your return request.',
                        icon: 'error',
                        confirmButtonColor: '#3085d6'
                    });
                });
        }
    });
}

</script>

<script>
    function returnItem(itemId) {
    // SweetAlert confirmation dialog
    Swal.fire({
        title: 'Are you sure?',
        text: "Do you want to return this item?",
        icon: 'warning',
        showCancelButton: true,
        confirmButtonColor: '#3085d6',
        cancelButtonColor: '#d33',
        confirmButtonText: 'Yes, return it!'
    }).then((result) => {
        if (result.isConfirmed) {
            // If confirmed, make the Axios POST request to return the item
            axios.post(`/return/item/${itemId}`, { reason: 'User requested return' })
                .then(response => {
                    if (response.data.success) {
                        // Handle success
                        Swal.fire({
                            title: 'Returned!',
                            text: 'Return request is Send waiting for approve',
                            icon: 'success',
                            confirmButtonText: 'OK'
                        }).then(() => {
                            location.reload(); // Optionally refresh the page to update the order list
                        });
                    } else {
                        // Handle error
                        Swal.fire({
                            title: 'Error!',
                            text: response.data.message,
                            icon: 'error',
                            confirmButtonText: 'OK'
                        });
                    }
                })
                .catch(error => {
                    console.error('Error returning item:', error);
                    Swal.fire({
                        title: 'Error!',
                        text: 'An error occurred while returning the item.',
                        icon: 'error',
                        confirmButtonText: 'OK'
                    });
                });
        }
    });
}
</script>

<!-- downlaod invoice  -->
 <script>
 async function downloadInvoice(orderId) {
    try {
        // Fetch the order data from your API
        const response = await axios.get(`/orders/${orderId}/details`);
        const order = response.data.order;

        // Using jsPDF to create a PDF
        const { jsPDF } = window.jspdf;
        const doc = new jsPDF();

        // Add company logo (assuming you have a base64 encoded logo)
        // doc.addImage(companyLogo, 'PNG', 20, 10, 40, 40);

        // Set colors
        const primaryColor = '#2563eb';  // Blue
        const secondaryColor = '#64748b'; // Gray
        const accentColor = '#0f172a';    // Dark blue

        // Header section
        doc.setFillColor(primaryColor);
        doc.rect(0, 0, 210, 40, 'F');
        doc.setTextColor('#ffffff');
        doc.setFontSize(24);
        doc.setFont('helvetica', 'bold');
        doc.text("INVOICE", 105, 25, null, null, "center");

        // Reset text color
        doc.setTextColor(accentColor);

        // Company Information (Left Side)
        doc.setFontSize(10);
        doc.setFont('helvetica', 'bold');
        doc.text("FROM:", 20, 50);
        doc.setFont('helvetica', 'normal');
        doc.text("Fruitable", 20, 55);
        doc.text("Kinfra ", 20, 60);
        doc.text("Calicut, Kerala, 676123", 20, 65);
        doc.text("Phone: 9947774065", 20, 70);
        doc.text("Email: fruitable@gmail.com", 20, 75);

        // Invoice Details (Right Side)
        doc.setFont('helvetica', 'bold');
        doc.text("Invoice Number:", 120, 50);
        doc.text("Order Date:", 120, 55);
       
        
        doc.setFont('helvetica', 'normal');
        doc.text(`INV-${order.orderId}`, 165, 50);
        doc.text(new Date(order.orderDate).toLocaleDateString(), 165, 55);
        

        // Billing Information
        doc.setFillColor('#f8fafc');
        doc.rect(20, 85, 170, 35, 'F');
        
        doc.setFont('helvetica', 'bold');
        doc.text("BILL TO:", 20, 95);
        doc.setFont('helvetica', 'normal');
        doc.text(order.user.username, 20, 100);
        doc.text(order.user.email, 20, 105);
        
        // Shipping Information
        doc.setFont('helvetica', 'bold');
        doc.text("SHIP TO:", 120, 95);
        doc.setFont('helvetica', 'normal');
        doc.text(order.address?.address || '', 120, 100);
        doc.text(order.address?.locality|| '', 120, 105);
        doc.text(order.address?.landmark || '', 120, 110);

        // Table Header
        let yPos = 130;
        doc.setFillColor(primaryColor);
        doc.rect(20, yPos - 5, 170, 8, 'F');
        doc.setTextColor('#ffffff');
        doc.setFont('helvetica', 'bold');
        doc.text("Item", 25, yPos);
        doc.text("Qty", 95, yPos);
        doc.text("Price", 115, yPos);
        doc.text("Status", 145, yPos);
        doc.text("Total", 175, yPos);

        // Table Contents
        yPos += 10;
        doc.setTextColor(accentColor);
        doc.setFont('helvetica', 'normal');
        
        // Alternate row colors
        let isAlternate = false;
        order.items.forEach(item => {
            if (isAlternate) {
                doc.setFillColor('#f8fafc');
                doc.rect(20, yPos - 5, 170, 8, 'F');
            }
            
            doc.text(item.productName.substring(0, 35), 25, yPos);
            doc.text(item.quantity.toString(), 95, yPos);
            doc.text(`$${item.price.toFixed(2)}`, 115, yPos);
            doc.text(item.status, 145, yPos);
            doc.text(`$${(item.price * item.quantity).toFixed(2)}`, 175, yPos);
            
            yPos += 10;
            isAlternate = !isAlternate;
        });

        // Summary Section
        yPos += 10;
        doc.setDrawColor(secondaryColor);
        doc.line(120, yPos - 5, 190, yPos - 5);
        
        doc.setFont('helvetica', 'normal');
        doc.text("Subtotal:", 145, yPos);
        const subtotal = order.items.reduce((total, item) => total + (item.price * item.quantity), 0);
        doc.text(`$${subtotal.toFixed(2)}`, 175, yPos);

        yPos += 8;
        doc.text("Delivery Charge:", 145, yPos);
        const deliveryCharge = order.deleveryCharge || 0;
        doc.text(`$${deliveryCharge.toFixed(2)}`, 175, yPos);

        yPos += 8;
        doc.setFont('helvetica', 'bold');
        doc.text("Total:", 145, yPos);
        const totalAmount = subtotal + deliveryCharge;
        doc.text(`$${totalAmount.toFixed(2)}`, 175, yPos);

        // Footer
        doc.setFontSize(8);
        doc.setFont('helvetica', 'normal');
        doc.setTextColor(secondaryColor);
        doc.text("Thank you for your business!", 105, 270, null, null, "center");
        doc.text("For any questions about this invoice, please contact support@example.com", 105, 275, null, null, "center");

        // Save the PDF
        doc.save(`Invoice-${order._id}.pdf`);
        
    } catch (error) {
        console.error("Error generating invoice:", error);
        Swal.fire({
            title: 'Error!',
            text: 'An error occurred while generating the invoice.',
            icon: 'error',
            confirmButtonText: 'OK'
        });
    }
}
 </script>

<script src="https://cdnjs.cloudflare.com/ajax/libs/jspdf/2.5.1/jspdf.umd.min.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.0.0/dist/js/bootstrap.bundle.min.js"></script>
    <script src="/User/lib/easing/easing.min.js"></script>
    <script src="/User/lib/waypoints/waypoints.min.js"></script>
    <script src="/User/lib/lightbox/js/lightbox.min.js"></script>
    <script src="/User/lib/owlcarousel/owl.carousel.min.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/axios/dist/axios.min.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>
    <script src="https://checkout.razorpay.com/v1/checkout.js"></script>

    <!-- Template Javascript -->
    <script src="/User/main.js"></script>
    <script src="/User/profile.js"></script>
</body>
</html>
